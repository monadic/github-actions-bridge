name: Artifact Handling
on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Create build artifacts
        run: |
          echo "Building application..."
          
          # Create binary
          mkdir -p build/bin
          echo '#!/bin/bash' > build/bin/myapp
          echo 'echo "MyApp v1.0.${{ github.run_number }}"' >> build/bin/myapp
          chmod +x build/bin/myapp
          
          # Create config files
          mkdir -p build/config
          cat > build/config/app.yaml << EOF
          app:
            name: myapp
            version: 1.0.${{ github.run_number }}
            build: ${{ github.sha }}
          EOF
          
          # Create documentation
          mkdir -p build/docs
          echo "# MyApp Documentation" > build/docs/README.md
          echo "Built on: $(date)" >> build/docs/README.md
          
          echo "Build artifacts created!"
          find build -type f -ls
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-binary-${{ github.run_number }}
          path: build/bin/
          retention-days: 7
      
      - name: Upload config artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-config-${{ github.run_number }}
          path: build/config/
      
      - name: Upload all artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-complete
          path: build/

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Download binary artifact
        uses: actions/download-artifact@v3
        with:
          name: app-binary-${{ github.run_number }}
          path: test-binary/
      
      - name: Test binary
        run: |
          echo "Testing downloaded binary..."
          chmod +x test-binary/myapp
          ./test-binary/myapp
          echo "âœ“ Binary works correctly!"
      
      - name: Generate test report
        run: |
          mkdir -p test-results
          cat > test-results/report.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <testsuites>
            <testsuite name="MyApp Tests" tests="3" failures="0">
              <testcase name="test_startup" time="0.1"/>
              <testcase name="test_functionality" time="0.2"/>
              <testcase name="test_shutdown" time="0.1"/>
            </testsuite>
          </testsuites>
          EOF
          
          echo "Test report generated!"
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/
          
  package:
    runs-on: ubuntu-latest
    needs: [build, test]
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      
      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -ls
      
      - name: Create release package
        run: |
          echo "Creating release package..."
          
          mkdir -p release
          cp -r artifacts/app-binary-*/myapp release/
          cp -r artifacts/app-config-*/* release/
          
          # Create release notes
          cat > release/RELEASE_NOTES.md << EOF
          # Release v1.0.${{ github.run_number }}
          
          ## Build Information
          - Build Number: ${{ github.run_number }}
          - Commit: ${{ github.sha }}
          - Date: $(date)
          
          ## Artifacts Included
          - myapp (executable)
          - app.yaml (configuration)
          - Test results available separately
          EOF
          
          # Create tarball
          tar -czf myapp-v1.0.${{ github.run_number }}.tar.gz -C release .
          
          echo "Release package created!"
          ls -la *.tar.gz
      
      - name: Upload release package
        uses: actions/upload-artifact@v3
        with:
          name: release-package
          path: myapp-*.tar.gz
          
  cleanup-demo:
    runs-on: ubuntu-latest
    needs: package
    if: always()
    
    steps:
      - name: Demonstrate artifact info
        run: |
          echo "=============================="
          echo "ARTIFACT SUMMARY"
          echo "=============================="
          echo "Build Artifacts:"
          echo "- app-binary-${{ github.run_number }}"
          echo "- app-config-${{ github.run_number }}"
          echo "- build-artifacts-complete"
          echo "- test-results"
          echo "- release-package"
          echo ""
          echo "Note: In local execution, artifacts are"
          echo "saved to the artifact directory specified"
          echo "in the CLI --artifact-dir flag"
          echo "==============================="