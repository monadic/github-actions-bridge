apiVersion: actions.confighub.com/v1alpha1
kind: Actions
metadata:
  name: cub-helm-cert-manager
name: Deploy cert-manager with Helm
on: [push, workflow_dispatch]

env:
  SPACE: actions-cert-manager
  HELM_CHART_VERSION: v1.17.1
  TARGET_SLUG: ck-kind-kind-kind
  VALUES: |
    # Enable CRDs
    crds:
      enabled: true

    # Number of replicas for the main cert-manager controller.
    replicaCount: 1
    
    webhook:
      # Number of replicas for the cert-manager webhook.
      # For HA, consider increasing this and enabling podDisruptionBudget.
      replicaCount: 1
      # Port the webhook service will listen on.
      securePort: 10250 # Default is 10250
    
    cainjector:
      # Number of replicas for the cert-manager cainjector.
      # For HA, consider increasing this and enabling podDisruptionBudget.
      replicaCount: 1
    
    prometheus:
      # Disable Prometheus metrics scraping by default for this test script
      # to reduce resource footprint.
      enabled: false
      # servicemonitor and podmonitor are disabled by default in the chart if prometheus.enabled is true
      # but servicemonitor.enabled is false. Explicitly setting prometheus.enabled to false disables all.
    
    global:
      logLevel: 2 # Default log level (0-6, 6 is most verbose)  

jobs:
  deploy-cert-manager:
    runs-on: ubuntu-latest
    steps:    
      - name: Install CUB
        run: |
          ARCH=$(uname -m)
          echo "Detected architecture: $ARCH"

          if [ "$ARCH" = "x86_64" ]; then
            CUB_ARCH="amd64"
          elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
            CUB_ARCH="arm64"
          else
            echo "Unsupported architecture: $ARCH"
            exit 1
          fi

          echo "Downloading cub-linux-$CUB_ARCH..."
          curl -L "https://github.com/chanwit/sdk/releases/download/v0.0.0-cb4781e/cub-linux-$CUB_ARCH" \
            -o /usr/local/bin/cub
          chmod +x /usr/local/bin/cub

      - name: Verify CUB and ConfigHub Context
        run: |
          # Test if .confighub is mounted and accessible
          if [ -d "$HOME/.confighub" ]; then
            echo "✅ .confighub directory is mounted"            
            cub context get || echo "Note: cub may need authentication"            
          else
            echo "⚠️ .confighub directory not found - cub commands may not work"
            echo "Please ensure you have run 'cub auth login' on the host system"
          fi

      - name: Check and create space if needed
        run: |
          echo "Checking if space '$SPACE' exists..."
          if cub space list --no-header --names | grep -q "^$SPACE"; then
            echo "Space '$SPACE' already exists"
          else
            echo "Creating space '$SPACE'..."
            cub space create "$SPACE"
            echo "Space '$SPACE' created successfully"
          fi

      - name: Add cert-manager Helm repository
        run: |
          echo "Installing Helm..."
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

          helm repo add jetstack https://charts.jetstack.io
          helm repo update

      - name: Check if cert-manager exists
        id: check-cert-manager
        run: |
          echo "Checking if cert-manager unit exists in space: $SPACE"
          if cub unit get cert-manager --space "$SPACE" --quiet 2>/dev/null; then
            echo "cert-manager unit found"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "cert-manager unit not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install cert-manager with cub helm
        if: steps.check-cert-manager.outputs.exists == 'false'
        run: |
          # Save VALUES environment variable to a file
          echo "$VALUES" > /tmp/cert-manager-values.yaml

          # Install cert-manager using cub helm command
          echo "Installing cert-manager version: $HELM_CHART_VERSION"
          cub helm install \
            --space "$SPACE" \
            --namespace cert-manager \
            --use-placeholder=false \
            cert-manager \
            jetstack/cert-manager \
            --values /tmp/cert-manager-values.yaml \
            --version "$HELM_CHART_VERSION"

      - name: Set cluster targets (once after create)
        if: steps.check-cert-manager.outputs.exists == 'false'
        run: |
          cub unit set-target --space "$SPACE" \
            cert-manager-crds $TARGET_SLUG

          cub unit set-target --space "$SPACE" \
            cert-manager-ns $TARGET_SLUG

          cub unit set-target --space "$SPACE" \
            cert-manager $TARGET_SLUG

      - name: Upgrade cert-manager with cub helm
        if: steps.check-cert-manager.outputs.exists == 'true'
        run: |
          # Save VALUES environment variable to a file
          echo "$VALUES" > /tmp/cert-manager-values.yaml

          # Upgrade cert-manager with CRD updates
          echo "Upgrading cert-manager to version: $HELM_CHART_VERSION"
          cub helm upgrade \
            --space "$SPACE" \
            --namespace cert-manager \
            --update-crds \
            --use-placeholder=false \
            cert-manager \
            jetstack/cert-manager \
            --values /tmp/cert-manager-values.yaml \
            --version "$HELM_CHART_VERSION"

      - name: Apply to deploy cert-manager
        run: |
          # TODO use bulk apply after it's implemented
          cub unit apply --space "$SPACE" \
            cert-manager-crds

          cub unit apply --space "$SPACE" \
            cert-manager-ns

          cub unit apply --space "$SPACE" \
            cert-manager
