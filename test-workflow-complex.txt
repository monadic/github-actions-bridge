name: Complex Multi-Stage Workflow
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
      skip_tests:
        description: 'Skip tests'
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Validate inputs
        id: check
        run: |
          echo "Validating version ${{ github.event.inputs.version }}"
          if [[ "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚úì Version format valid"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "‚úó Invalid version format"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  test:
    needs: validate
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    strategy:
      matrix:
        test-suite: [unit, integration, e2e]
        include:
          - test-suite: unit
            timeout: 10
          - test-suite: integration
            timeout: 20
          - test-suite: e2e
            timeout: 30
    runs-on: ubuntu-latest
    steps:
      - name: Setup test environment
        run: |
          echo "Setting up ${{ matrix.test-suite }} tests"
          echo "Timeout: ${{ matrix.timeout }} minutes"
      
      - name: Run ${{ matrix.test-suite }} tests
        timeout-minutes: ${{ matrix.timeout }}
        run: |
          echo "Running ${{ matrix.test-suite }} tests..."
          # Simulate test execution
          sleep 2
          echo "‚úì ${{ matrix.test-suite }} tests passed"
      
      - name: Upload test results
        run: |
          mkdir -p output/test-results
          echo "Test suite: ${{ matrix.test-suite }}" > output/test-results/${{ matrix.test-suite }}.txt
          echo "Status: PASSED" >> output/test-results/${{ matrix.test-suite }}.txt
          echo "Duration: 2s" >> output/test-results/${{ matrix.test-suite }}.txt

  build:
    needs: [validate, test]
    if: ${{ always() && needs.validate.result == 'success' && (needs.test.result == 'success' || needs.test.result == 'skipped') }}
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Setup build environment
        run: |
          echo "App: ${{ env.CONFIG_APP_NAME }}"
          echo "Version: ${{ github.event.inputs.version }}"
          echo "Build number: ${{ env.CONFIGHUB_REVISION }}"
      
      - name: Build application
        env:
          BUILD_ARGS: ${{ env.CONFIG_BUILD_ARGS }}
        run: |
          echo "Building with args: $BUILD_ARGS"
          # Simulate build
          sleep 3
          echo "‚úì Build successful"
      
      - name: Run smoke tests
        run: |
          echo "Testing Redis connection..."
          # Note: In act, services run in Docker network
          echo "‚úì Redis responding"
      
      - name: Create artifacts
        run: |
          mkdir -p output/build
          echo "{
            \"app\": \"${{ env.CONFIG_APP_NAME }}\",
            \"version\": \"${{ github.event.inputs.version }}\",
            \"build\": \"${{ env.CONFIGHUB_REVISION }}\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
          }" > output/build/manifest.json
          echo "‚úì Build artifacts created"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [us-east-1, us-west-2, eu-west-1]
      max-parallel: 1
    steps:
      - name: Deploy to ${{ matrix.region }}
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          REGION: ${{ matrix.region }}
        run: |
          echo "Deploying to region: $REGION"
          echo "Using deployment key: $(if [ -n \"$DEPLOY_KEY\" ]; then echo \"‚úì Set\"; else echo \"‚úó Missing\"; fi)"
          
          # Simulate deployment steps
          echo "- Connecting to $REGION..."
          sleep 1
          echo "- Uploading artifacts..."
          sleep 1
          echo "- Updating configuration..."
          sleep 1
          echo "- Starting services..."
          sleep 1
          echo "‚úì Deployment to $REGION complete"
      
      - name: Verify deployment
        run: |
          echo "Running health checks in ${{ matrix.region }}..."
          sleep 2
          echo "‚úì All services healthy in ${{ matrix.region }}"

  notify:
    needs: [validate, test, build, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Prepare notification
        run: |
          echo "Workflow Summary:"
          echo "- Version: ${{ github.event.inputs.version }}"
          echo "- Validation: ${{ needs.validate.result }}"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Deploy: ${{ needs.deploy.result }}"
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üéâ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
          fi
